# Axionax Core - Quick Test Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Axionax Core ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß

Write-Host "üöÄ Axionax Core - Quick Test" -ForegroundColor Cyan
Write-Host "================================`n" -ForegroundColor Cyan

$ErrorActionPreference = "Continue"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
function Test-Command {
    param($Name, $Command)
    Write-Host "üîç Testing: $Name" -ForegroundColor Yellow
    Invoke-Expression $Command
    Write-Host "`n"
}

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Binary
Write-Host "Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Axionax Core Binary" -ForegroundColor Green
if (Test-Path ".\build\axionax-core.exe") {
    Write-Host "‚úÖ Binary found!" -ForegroundColor Green
    Test-Command "Version" ".\build\axionax-core.exe version"
} else {
    Write-Host "‚ùå Binary not found! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ build ‡∏Å‡πà‡∏≠‡∏ô: go build -o build\axionax-core.exe .\cmd\axionax" -ForegroundColor Red
    exit 1
}

# 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Configuration
Write-Host "Step 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Configuration" -ForegroundColor Green
Test-Command "Config Init" ".\build\axionax-core.exe config init"
Test-Command "Config Show" ".\build\axionax-core.exe config show"

# 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Key Generation
Write-Host "Step 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Key Management" -ForegroundColor Green
Test-Command "Generate Validator Key" ".\build\axionax-core.exe keys generate --type validator"
Test-Command "Generate Worker Key" ".\build\axionax-core.exe keys generate --type worker"
Test-Command "List Keys" ".\build\axionax-core.exe keys list"

# 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Status Commands
Write-Host "Step 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Status Commands" -ForegroundColor Green
Test-Command "Validator Status" ".\build\axionax-core.exe validator status"
Test-Command "Worker Status" ".\build\axionax-core.exe worker status"
Test-Command "Stake Balance" ".\build\axionax-core.exe stake balance"

# 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Worker Specs
Write-Host "Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á Worker Specifications" -ForegroundColor Green
$workerJson = @'
{
  "gpus": [{
    "model": "NVIDIA RTX 4090",
    "vram": 24,
    "count": 1
  }],
  "cpu_cores": 16,
  "ram": 64,
  "storage": 1000,
  "bandwidth": 1000,
  "region": "us-west"
}
'@
Set-Content -Path "worker-specs.json" -Value $workerJson -Encoding UTF8
Write-Host "Created worker-specs.json" -ForegroundColor Green

# 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
Write-Host "`nStep 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker ‡πÅ‡∏•‡∏∞ Testnet" -ForegroundColor Green
$dockerInstalled = Get-Command docker -ErrorAction SilentlyContinue
if ($dockerInstalled) {
    Write-Host "Docker ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß" -ForegroundColor Green
    
    $dockerStatus = docker ps 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Docker Engine ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" -ForegroundColor Green
        
        Write-Host "`nDocker Containers:" -ForegroundColor Cyan
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        Write-Host "`nTestnet Services:" -ForegroundColor Cyan
        Write-Host "  RPC: http://localhost:8545" -ForegroundColor White
        Write-Host "  Explorer: http://localhost:4001" -ForegroundColor White
        Write-Host "  Faucet: http://localhost:8080" -ForegroundColor White
        
    } else {
        Write-Host "Docker Engine ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Docker Desktop" -ForegroundColor Yellow
    }
} else {
    Write-Host "Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á - ‡πÉ‡∏ä‡πâ Demo Mode ‡πÑ‡∏î‡πâ" -ForegroundColor Yellow
}

# 7. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
Write-Host "`n" -ForegroundColor White
Write-Host "================================" -ForegroundColor Cyan
Write-Host "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Start Node:" -ForegroundColor Green
Write-Host "   .\build\axionax-core.exe start --network testnet" -ForegroundColor White
Write-Host ""
Write-Host "Start Validator:" -ForegroundColor Green
Write-Host "   .\build\axionax-core.exe validator start" -ForegroundColor White
Write-Host ""
Write-Host "Register Worker:" -ForegroundColor Green
Write-Host "   .\build\axionax-core.exe worker register --specs worker-specs.json" -ForegroundColor White
Write-Host ""
Write-Host "Deposit Stake:" -ForegroundColor Green
Write-Host "   .\build\axionax-core.exe stake deposit 10000 --address 0x..." -ForegroundColor White
Write-Host ""
Write-Host "Help:" -ForegroundColor Green
Write-Host "   .\build\axionax-core.exe --help" -ForegroundColor White
Write-Host ""

# 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RPC endpoint (‡∏ñ‡πâ‡∏≤ Docker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
if ($dockerInstalled -and ($LASTEXITCODE -eq 0)) {
    Write-Host "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Testnet Endpoints..." -ForegroundColor Green
    
    $curlInstalled = Get-Command curl.exe -ErrorAction SilentlyContinue
    if ($curlInstalled) {
        $rpcTest = curl.exe -s -X POST http://localhost:8545 -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' 2>&1
        
        if ($rpcTest -match "0x7a69") {
            Write-Host "RPC Endpoint ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (Chain ID: 31337)" -ForegroundColor Green
        } else {
            Write-Host "RPC Endpoint ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á" -ForegroundColor Yellow
        }
    }
}

Write-Host "`n================================" -ForegroundColor Cyan
Write-Host "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!" -ForegroundColor Green
Write-Host "================================`n" -ForegroundColor Cyan

Write-Host "‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:" -ForegroundColor Cyan
Write-Host "   TESTING_GUIDE.md - ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°" -ForegroundColor White
Write-Host "   QUICKSTART.md - Quick start guide" -ForegroundColor White
Write-Host "   docs/API_REFERENCE.md - API documentation" -ForegroundColor White
Write-Host ""
