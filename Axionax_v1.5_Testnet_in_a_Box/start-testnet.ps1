# Axionax Testnet Startup Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Testnet-in-a-Box

Write-Host "üöÄ Starting Axionax Testnet v1.5" -ForegroundColor Cyan
Write-Host "================================`n" -ForegroundColor Cyan

$ErrorActionPreference = "Continue"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker
Write-Host "Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker" -ForegroundColor Green
try {
    docker --version
    Write-Host "‚úÖ Docker installed" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker not found! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker Desktop" -ForegroundColor Red
    Write-Host "   Download: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
    exit 1
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Engine
Write-Host "`nStep 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Engine" -ForegroundColor Green
$dockerStatus = docker ps 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Docker Engine ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!" -ForegroundColor Red
    Write-Host "   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Docker Desktop ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ icon ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" -ForegroundColor Yellow
    Write-Host "   ‡∏Å‡∏î Enter ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°..." -ForegroundColor Yellow
    Read-Host
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    $dockerStatus = docker ps 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Docker Engine ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" -ForegroundColor Red
        exit 1
    }
}
Write-Host "‚úÖ Docker Engine running" -ForegroundColor Green

# ‡∏´‡∏¢‡∏∏‡∏î containers ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
Write-Host "`nStep 3: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î containers ‡πÄ‡∏Å‡πà‡∏≤" -ForegroundColor Green
docker compose down 2>&1 | Out-Null
Write-Host "‚úÖ Cleaned up old containers" -ForegroundColor Green

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Testnet
Write-Host "`nStep 4: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Testnet Services" -ForegroundColor Green
Write-Host "   (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î images ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)" -ForegroundColor Yellow
docker compose up -d

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Testnet started!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Failed to start testnet" -ForegroundColor Red
    exit 1
}

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ services ‡∏û‡∏£‡πâ‡∏≠‡∏°
Write-Host "`nStep 5: ‡∏£‡∏≠‡πÉ‡∏´‡πâ services ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô..." -ForegroundColor Green
Start-Sleep -Seconds 10

# ‡πÅ‡∏™‡∏î‡∏á status
Write-Host "`nStep 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Service Status" -ForegroundColor Green
docker compose ps

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RPC endpoint
Write-Host "`nStep 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RPC Endpoint" -ForegroundColor Green
$maxRetries = 10
$retryCount = 0
$rpcReady = $false

while ($retryCount -lt $maxRetries -and -not $rpcReady) {
    try {
        $response = curl.exe -s -X POST http://localhost:8545 `
            -H "Content-Type: application/json" `
            -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' 2>&1
        
        if ($response -match "0x7a69") {
            Write-Host "‚úÖ RPC Endpoint ready! (Chain ID: 31337)" -ForegroundColor Green
            $rpcReady = $true
        } else {
            $retryCount++
            Write-Host "   ‚è≥ Waiting for RPC... ($retryCount/$maxRetries)" -ForegroundColor Yellow
            Start-Sleep -Seconds 3
        }
    } catch {
        $retryCount++
        Write-Host "   ‚è≥ Waiting for RPC... ($retryCount/$maxRetries)" -ForegroundColor Yellow
        Start-Sleep -Seconds 3
    }
}

if (-not $rpcReady) {
    Write-Host "‚ö†Ô∏è  RPC Endpoint ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á - ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs: docker compose logs anvil" -ForegroundColor Yellow
}

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• endpoints
Write-Host "`n================================" -ForegroundColor Cyan
Write-Host "üéâ Testnet ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!" -ForegroundColor Green
Write-Host "================================`n" -ForegroundColor Cyan

Write-Host "üì° Endpoints:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ RPC:      http://localhost:8545" -ForegroundColor White
Write-Host "   ‚Ä¢ Explorer: http://localhost:4001" -ForegroundColor White
Write-Host "   ‚Ä¢ Faucet:   http://localhost:8080" -ForegroundColor White
Write-Host ""

Write-Host "üîë Default Accounts (Anvil):" -ForegroundColor Cyan
Write-Host "   Address: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266" -ForegroundColor White
Write-Host "   PKey:    0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" -ForegroundColor White
Write-Host "   Balance: 10000 ETH" -ForegroundColor Green
Write-Host ""

Write-Host "üí∞ ‡∏Ç‡∏≠ Test Tokens:" -ForegroundColor Cyan
Write-Host '   curl -X POST http://localhost:8080/faucet -H "Content-Type: application/json" -d "{\"address\":\"YOUR_ADDRESS\"}"' -ForegroundColor White
Write-Host ""

Write-Host "üîç ‡∏î‡∏π Logs:" -ForegroundColor Cyan
Write-Host "   docker compose logs -f anvil      # RPC node" -ForegroundColor White
Write-Host "   docker compose logs -f blockscout # Explorer" -ForegroundColor White
Write-Host "   docker compose logs -f faucet     # Faucet" -ForegroundColor White
Write-Host ""

Write-Host "üõë ‡∏´‡∏¢‡∏∏‡∏î Testnet:" -ForegroundColor Cyan
Write-Host "   docker compose down" -ForegroundColor White
Write-Host ""

Write-Host "üìñ Next Steps:" -ForegroundColor Cyan
Write-Host "   1. ‡πÄ‡∏õ‡∏¥‡∏î Explorer: http://localhost:4001" -ForegroundColor White
Write-Host "   2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RPC: curl -X POST http://localhost:8545 -H 'Content-Type: application/json' -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'" -ForegroundColor White
Write-Host "   3. ‡πÄ‡∏£‡∏¥‡πà‡∏° Axionax Core: cd .. && .\build\axionax-core.exe start --network testnet" -ForegroundColor White
Write-Host ""

Write-Host "================================`n" -ForegroundColor Cyan
